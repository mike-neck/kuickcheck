buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.3'
    }
}

ext {
    kotlinVersion = '1.0.3'
    jdk = '1.8'
    encoding = 'UTF-8'
    canRelease = {
        project.hasProperty('sonatypeUrl') && project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    }
}

group = 'org.mikeneck'
version = '0.1.1'

subprojects {
    apply plugin: 'kotlin'

    group = parent.group
    version = parent.version

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}

project(':core') {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply from: 'generate-source.gradle'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        testCompile 'junit:junit:4.12'
    }

    tasks.compileKotlin.dependsOn 'generateSource'

    jar {
        baseName = parent.name
        appendix = project.name
    }

    sourceSets {
        main.kotlin.srcDirs += 'src/main/generated'
    }

    task javadocJar(type: Jar) {
        baseName = project.parent.name
        appendix = project.name
        classifier = 'javadoc'
        from tasks.javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives tasks.javadocJar, tasks.sourcesJar
    }

    signing {
        sign configurations.archives
    }

    if (canRelease()) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment ->
                        signing.signPom(deployment)
                    }
                    repository(url: sonatypeUrl) {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }
                    pom.project {
                        name 'KuickCheck'
                        packaging 'jar'
                        description 'Property based testing framework for Kotlin'
                        url 'https://github.com/mike-neck/kuickcheck'

                        scm {
                            connection 'scm:git:https://github.com/mike-neck/kuickcheck'
                            developerConnection 'scm:git:https://github.com/mike-neck/kuickcheck'
                            url 'https://github.com/mike-neck/kuickcheck'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'mikeneck'
                                name 'Shinya Mochida'
                                email 'jkrt3333[at]gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

project(':example') {
    dependencies {
        testCompile project(':core')
    }

    task showRuntime {
        doLast {
            sourceSets.test.runtimeClasspath.each {
                println it
            }
        }
    }

    task kuickcheck(type: JavaExec, description: 'Run checks') {
        classpath sourceSets.test.runtimeClasspath
        main = 'org.mikeneck.kuickcheck.KuickCheck'
        standardOutput = System.out
        args '--debug'
    }
}

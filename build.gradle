buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "$kotlinGroup:$kotlinGradlePlugin:$kotlinVersion"
        classpath "$dokkaGroup:$dokkaGradlePlugin:$dokkaVersion"
        classpath "$junitPlatformGroup:$junitPlatformPlugin:$junitPlatformVersion"
    }
}

ext {
    jdk = '1.8'
    encoding = 'UTF-8'
    canRelease = {
        project.hasProperty('sonatypeUrl') && project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    }

    releaseProject = { Project p ->
        p.apply from: rootProject.file('module.gradle')
        if (canRelease()) {
            p.apply from: rootProject.file('release.gradle')
        }
    }
}

group = 'org.mikeneck'
version = '0.1.1'

subprojects {
    apply plugin: kotlin

    group = parent.group
    version = parent.version

    repositories {
        jcenter()
    }

    dependencies {
        compile "$kotlinGroup:$kotlinStdLib:$kotlinVersion"
    }
}

project(':core') {
    apply from: 'generate-source.gradle'
    releaseProject(project)

    dependencies {
        compile project(':api')
        compile "$kotlinGroup:$kotlinReflect:$kotlinVersion"
    }

    tasks.compileKotlin.dependsOn 'generateSource'

    sourceSets {
        main.kotlin.srcDirs += 'src/main/generated'
    }
}

project(':example') {
    dependencies {
        testCompile project(':core')
    }

    task kuickcheck(type: JavaExec, description: 'Run checks') {
        classpath sourceSets.test.runtimeClasspath
        main = 'org.mikeneck.kuickcheck.KuickCheck'
        standardOutput = System.out
        //noinspection GroovyAssignabilityCheck
        args '--debug'
    }
}

project(':api') {
    releaseProject(project)
}

project(':report') {
    releaseProject(project)

    dependencies {
        compile project(':core')
    }
}

project(':runner') {
    releaseProject(project)

    dependencies {
        compile project(':core')
        compile project(':report')
    }
}
